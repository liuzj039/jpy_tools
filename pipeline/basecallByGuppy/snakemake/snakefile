import pandas as pd
#configfile: "/public/home/liuzj/scripts/pipeline/basecallByGuppy/snakemake/config.yaml"
pipelineDir = config['pipelineDir']
resultDir = config["resultDir"].rstrip("/") + "/"
pipelineDir = config["pipelineDir"].rstrip("/") + "/"


## get parameter of rule `splitH5` ##
import pandas as pd
dt_h5 = config['input']
df_splitH5 = pd.DataFrame.from_dict(dt_h5).T
df_splitH5['dir_output'] = df_splitH5.index + '/'
for column in ['dir_output']:
    df_splitH5[column] = resultDir + 'step1_splitH5/' + df_splitH5[column]


## get parameter of rule `basecall` ##
df_basecall = df_splitH5.copy()
df_basecall["nparts"] = df_basecall["nparts"].map(lambda x: list(range(x)))
df_basecall = df_basecall.explode("nparts")
df_basecall = df_basecall[["nparts", "dir_output"]]
df_basecall['sample'] = df_basecall.index
df_basecall.index = df_basecall.index + df_basecall.nparts.astype(str)
df_basecall.dir_output = df_basecall.dir_output + df_basecall.nparts.astype(str) + '/'
df_basecall['basecalledDir'] = df_basecall.index + '/'
df_basecall['guppy'] = config['guppy']
df_basecall['model'] = config['model']
for column in ['basecalledDir']:
    df_basecall[column] = resultDir + 'step2_basecall/' + df_basecall[column]

def parseDfToInput_basecall_splitH5(wildcard):
    selfWildCardUnique = True
    if isinstance(df_basecall.at[wildcard.sampleSplit, 'sample'], list):
        selfWildCardUnique = False
    if selfWildCardUnique:
        return resultDir + 'step1_splitH5/' + df_basecall.at[wildcard.sampleSplit, 'sample'] + '.finished'
    else:
        return [resultDir + 'step1_splitH5/' + x + '.finished' for x in df_basecall.loc[wildcard.sampleSplit, 'sample']]

def parseDfToParams_basecall_splitH5_need_h5(wildcard):
    selfWildCardUnique = True
    if isinstance(df_basecall.at[wildcard.sampleSplit, 'sample'], list):
        selfWildCardUnique = False
    if selfWildCardUnique:
        fromSampleName = df_basecall.at[wildcard.sampleSplit, 'sample']
        return df_splitH5.at[fromSampleName, 'need_h5']
    else:
        ls_fromSampleName = df_basecall.loc[wildcard.sampleSplit, 'sample']
        return [df_splitH5.at[x, 'need_h5'] for x in ls_fromSampleName]


## get parameter of rule `mergeFq` ##
df_mergeFq = df_basecall.reset_index().groupby("sample")["index"].agg(list).pipe(
    pd.DataFrame
).rename(columns={"index": "sampleSplit"}).assign(dir_out=lambda df: df.index + "/")
for column in ['dir_out']:
    df_mergeFq[column] = resultDir + 'step3_mergeFq/' + df_mergeFq[column]

def parseDfToInput_mergeFq_basecall(wildcard):
    selfWildCardUnique = True
    if isinstance(df_mergeFq.at[wildcard.sample, 'sampleSplit'], list):
        selfWildCardUnique = False
    if selfWildCardUnique:
        return resultDir + 'step2_basecall/' + df_mergeFq.at[wildcard.sample, 'sampleSplit'] + '.finished'
    else:
        return [resultDir + 'step2_basecall/' + x + '.finished' for x in df_mergeFq.loc[wildcard.sample, 'sampleSplit']]

def parseDfToParams_mergeFq_basecall_basecalledDir(wildcard):
    selfWildCardUnique = True
    if isinstance(df_mergeFq.at[wildcard.sample, 'sampleSplit'], list):
        selfWildCardUnique = False
    if selfWildCardUnique:
        fromSampleName = df_mergeFq.at[wildcard.sample, 'sampleSplit']
        return df_basecall.at[fromSampleName, 'basecalledDir']
    else:
        ls_fromSampleName = df_mergeFq.loc[wildcard.sample, 'sampleSplit']
        return [df_basecall.at[x, 'basecalledDir'] for x in ls_fromSampleName]

rule all:
    input:
        mergeFqFinished = [resultDir + 'step3_mergeFq/' + "" + sample + ".finished" for sample in df_mergeFq.index],

# parameter's dataframe of splitH5: 
# |     | need_h5   |   nparts | path                                                                                    | dir_output   |
# |:----|:----------|---------:|:----------------------------------------------------------------------------------------|:-------------|
# | all | False     |       12 | /scem/work/liuzj/projects/mouse/allFast5/20210723_1345_MN29338_FAQ41752_7386409e/fast5/ | all/         |
rule splitH5:
    input:
        path = lambda wildcard: df_splitH5.at[wildcard.sample, 'path'],
    output:
        splitH5Finished = resultDir + 'step1_splitH5/' + '{sample}.finished',
    params:
        gpu = 0,
        nparts = lambda wildcard: df_splitH5.at[wildcard.sample, 'nparts'],
        dir_output = lambda wildcard: df_splitH5.at[wildcard.sample, 'dir_output'],
    threads:1
    priority:0
    shell:
        """
cd {pipelineDir}
python ./splitFast5ToMultipleDir.py -i {input.path} -o {params.dir_output} -n {params.nparts}
touch {output.splitH5Finished}
        """

# parameter's dataframe of basecall: 
# |       |   nparts | dir_output   | sample   | basecalledDir   | guppy                                          | model                                                    |
# |:------|---------:|:-------------|:---------|:----------------|:-----------------------------------------------|:---------------------------------------------------------|
# | all0  |        0 | all/0/       | all      | all0/           | ~/softwares/ont-guppy-4.2/bin/guppy_basecaller | ~/softwares/ont-guppy-4.2/data/dna_r9.4.1_450bps_hac.cfg |
# | all1  |        1 | all/1/       | all      | all1/           | ~/softwares/ont-guppy-4.2/bin/guppy_basecaller | ~/softwares/ont-guppy-4.2/data/dna_r9.4.1_450bps_hac.cfg |
# | all2  |        2 | all/2/       | all      | all2/           | ~/softwares/ont-guppy-4.2/bin/guppy_basecaller | ~/softwares/ont-guppy-4.2/data/dna_r9.4.1_450bps_hac.cfg |
# | all3  |        3 | all/3/       | all      | all3/           | ~/softwares/ont-guppy-4.2/bin/guppy_basecaller | ~/softwares/ont-guppy-4.2/data/dna_r9.4.1_450bps_hac.cfg |
# | all4  |        4 | all/4/       | all      | all4/           | ~/softwares/ont-guppy-4.2/bin/guppy_basecaller | ~/softwares/ont-guppy-4.2/data/dna_r9.4.1_450bps_hac.cfg |
# | all5  |        5 | all/5/       | all      | all5/           | ~/softwares/ont-guppy-4.2/bin/guppy_basecaller | ~/softwares/ont-guppy-4.2/data/dna_r9.4.1_450bps_hac.cfg |
# | all6  |        6 | all/6/       | all      | all6/           | ~/softwares/ont-guppy-4.2/bin/guppy_basecaller | ~/softwares/ont-guppy-4.2/data/dna_r9.4.1_450bps_hac.cfg |
# | all7  |        7 | all/7/       | all      | all7/           | ~/softwares/ont-guppy-4.2/bin/guppy_basecaller | ~/softwares/ont-guppy-4.2/data/dna_r9.4.1_450bps_hac.cfg |
# | all8  |        8 | all/8/       | all      | all8/           | ~/softwares/ont-guppy-4.2/bin/guppy_basecaller | ~/softwares/ont-guppy-4.2/data/dna_r9.4.1_450bps_hac.cfg |
# | all9  |        9 | all/9/       | all      | all9/           | ~/softwares/ont-guppy-4.2/bin/guppy_basecaller | ~/softwares/ont-guppy-4.2/data/dna_r9.4.1_450bps_hac.cfg |
# | all10 |       10 | all/10/      | all      | all10/          | ~/softwares/ont-guppy-4.2/bin/guppy_basecaller | ~/softwares/ont-guppy-4.2/data/dna_r9.4.1_450bps_hac.cfg |
# | all11 |       11 | all/11/      | all      | all11/          | ~/softwares/ont-guppy-4.2/bin/guppy_basecaller | ~/softwares/ont-guppy-4.2/data/dna_r9.4.1_450bps_hac.cfg |
rule basecall:
    input:
        splitH5Finished = parseDfToInput_basecall_splitH5,
    output:
        basecallFinished = resultDir + 'step2_basecall/' + '{sampleSplit}.finished',
    params:
        gpu = 2,
        need_h5 = parseDfToParams_basecall_splitH5_need_h5,
        dir_output = lambda wildcard: df_basecall.at[wildcard.sampleSplit, 'dir_output'],
        basecalledDir = lambda wildcard: df_basecall.at[wildcard.sampleSplit, 'basecalledDir'],
        guppy = lambda wildcard: df_basecall.at[wildcard.sampleSplit, 'guppy'],
        model = lambda wildcard: df_basecall.at[wildcard.sampleSplit, 'model'],
    threads:18
    priority:0
    shell:
        """
if [ {params.need_h5} = True ]
then
    {params.guppy} -c {params.model} -i {params.dir_output} --qscore_filtering --min_qscore=7 -s {params.basecalledDir} -x "cuda:all:100%" --disable_pings --fast5_out
else
    {params.guppy} -c {params.model} -i {params.dir_output} --qscore_filtering --min_qscore=7 -s {params.basecalledDir} -x "cuda:all:100%" --disable_pings
fi
touch {output.basecallFinished}
        """

# parameter's dataframe of mergeFq: 
# | sample   | sampleSplit                                                                                        | dir_out   |
# |:---------|:---------------------------------------------------------------------------------------------------|:----------|
# | all      | ['all0', 'all1', 'all2', 'all3', 'all4', 'all5', 'all6', 'all7', 'all8', 'all9', 'all10', 'all11'] | all/      |
rule mergeFq:
    input:
        basecallFinished = parseDfToInput_mergeFq_basecall,
    output:
        mergeFqFinished = resultDir + 'step3_mergeFq/' + '{sample}.finished',
    params:
        gpu = 0,
        basecalledDir = parseDfToParams_mergeFq_basecall_basecalledDir,
        dir_out = lambda wildcard: df_mergeFq.at[wildcard.sample, 'dir_out'],
    threads:18
    priority:0
    shell:
        """
mkdir -p {params.dir_out}
cd {pipelineDir}
python mergeFastq.py {params.basecalledDir} -o {params.dir_out} -t {threads}
touch {output.mergeFqFinished}
        """



import sh
from tempfile import NamedTemporaryFile
import pyranges as pr
from concurrent.futures import ProcessPoolExecutor
from itertools import repeat
from rpy2.robjects.packages import importr
from jpy_tools.rTools import py2r, r2py, r_inline_plot, rHelp, trl, rSet, rGet
import click
bambu = importr("bambu")


def getAntiGtf(path_gtf):
    fh = NamedTemporaryFile(mode='w+t', suffix='.gtf', delete=False)
    gtf_anti = pr.read_gtf(path_gtf, as_df=True)
    gtf_anti['Strand'] = gtf_anti['Strand'].map({"+":"-", "-":"+"})
    gtf_anti = pr.PyRanges(gtf_anti)
    gtf_anti.to_gtf(fh.name)
    return fh

def getNanoporeCountMtx(
    path_bam, path_genome, path_gtf, dir_output, onlyBothStrand=True, threads=24
):
    """
    use bambu calculate nanopore's gene/transcript count matrix

    Parameters
    ----------
    path_bam :
        bam file generated by minimap2
    path_genome : [type]
        fasta file
    path_gtf : [type]
        gtf gile
    dir_output : [type]
        output dir
    onlyBothStrand : bool, optional
        by default True
    threads : int, optional
        by default 24
    """
    if onlyBothStrand:
        lsPath_gtf = [path_gtf]
        ls_strand = [False]
        lsDir_output = [f"{dir_output}/bothStrand/"]
    else:
        fh = getAntiGtf(path_gtf)
        lsPath_gtf = [path_gtf, fh.name]
        ls_strand = [True, True]
        lsDir_output = [f"{dir_output}/senseStrand/", f"{dir_output}/antisenseStrand/"]
        threads = threads // 2
    with ProcessPoolExecutor(len(ls_strand)) as mtp:
        ls_result = mtp.map(
            _useBambu,
            repeat(path_bam),
            repeat(path_genome),
            lsPath_gtf,
            lsDir_output,
            ls_strand,
            repeat(threads),
        )
    if not onlyBothStrand:
        fh.close()


def _useBambu(path_bam, path_genome, path_gtf, dir_output, stranded, threads):
    sh.mkdir(dir_output, p=True)
    gtfR_bambu = bambu.prepareAnnotations(path_gtf)
    seR = bambu.bambu(
        reads=path_bam,
        annotations=trl(gtfR_bambu),
        genome=path_genome,
        discovery=False,
        ncore=threads,
        stranded=stranded,
    )
    bambu.writeBambuOutput(seR, dir_output)


@click.command()
@click.option("-b", "path_bam")
@click.option("-f", "path_genome")
@click.option("-g", "path_gtf")
@click.option("-o", "dir_output")
@click.option("--needStrand", "needStrand", is_flag=True)
@click.option("-t", "threads", type=int)
def _getNanoporeCountMtx(
    path_bam, path_genome, path_gtf, dir_output, needStrand, threads
):
    """
    \b
    use bambu calculate nanopore's gene/transcript count matrix

    \b
    Parameters
    ----------
    -b, path_bam :
        bam file generated by minimap2
    -f, path_genome :
        fasta file
    -g, path_gtf :
        gtf gile
    -o, dir_output :
        output dir
    --needStrand : bool, optional
        <flag>, if set, strand info will provided on output file
    -t, threads
    """
    onlyBothStrand = not needStrand
    getNanoporeCountMtx(
        path_bam, path_genome, path_gtf, dir_output, onlyBothStrand, threads
    )

if __name__ == '__main__':
    _getNanoporeCountMtx()
